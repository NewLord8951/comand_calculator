import asyncio
import os
from loguru import logger
from dotenv import load_dotenv, find_dotenv
from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, ReplyKeyboardRemove
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
import re
import math

load_dotenv(find_dotenv())
TOKEN = os.getenv("TOKEN")

storage = MemoryStorage()
dp = Dispatcher(storage=storage)

calc_keyboard = [
    ['7', '8', '9', '/', '('],
    ['4', '5', '6', '*', ')'],
    ['1', '2', '3', '-', 'C'],
    ['0', '.', '=', '+', '‚å´']
]


class CalcState(StatesGroup):
    normal = State()
    advanced = State()


@dp.message(Command('start'))
async def start_game(message: Message):
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name}! –Ø –±–æ—Ç-–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä.\n"
        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/calc - —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=calc_keyboard,
            resize_keyboard=True
        )
    )


@dp.message()
async def handle_normal_mode(message: Message):
    text = message.text

    if text == 'C':
        await message.answer("–û—á–∏—â–µ–Ω–æ. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ.")
        return

    if text == '=':
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –Ω–∞–∂–∞—Ç–∏–µ–º '='")
        return

    if text == '‚å´':
        await message.answer("–§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞")
        return

    try:
        cleaned_text = re.sub(r'[^\d+\-*/(). ]', '', text)
        result = eval(cleaned_text)
        await message.answer(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


@dp.message(Command('calc'))
async def start_advanced_mode(message: Message, state: FSMContext):
    await state.set_state(CalcState.advanced)
    await message.answer(
        "üìü –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞. –í–≤–µ–¥–∏—Ç–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ:",
        reply_markup=ReplyKeyboardRemove()
    )


@dp.message(Command('cancel'), CalcState.advanced)
async def cancel_advanced_mode(message: Message, state: FSMContext):
    await state.set_state(CalcState.normal)
    await message.answer(
        "üö™ –í—ã—Ö–æ–¥ –∏–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞.",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=calc_keyboard,
            resize_keyboard=True
        )
    )


@dp.message(CalcState.advanced)
async def handle_advanced_mode(message: Message, state: FSMContext):
    text = message.text
    try:
        cleaned_text = re.sub(r'[^\d+\-*/().^%&| ]', '', text)
        safe_dict = {k: v for k, v in math.__dict__.items() if not k.startswith('_')}
        safe_dict.update({'abs': abs, 'round': round})
        result = eval(cleaned_text, {"__builtins__": None}, safe_dict)
        await message.answer(
            f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ /cancel –¥–ª—è –≤—ã—Ö–æ–¥–∞."
        )
    except Exception as e:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞: {e}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ /cancel –¥–ª—è –≤—ã—Ö–æ–¥–∞."
        )


async def main():
    logger.add(
        "file.log",
        format="{time:YYYY-MM-DD at HH:mm:ss} | {level} | {message}",
        rotation="3 days",
        backtrace=True,
        diagnose=True
    )

    bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode="HTML"))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    try:
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
    finally:
        await bot.session.close()
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == '__main__':
    asyncio.run(main())
