from aiogram import Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import re
import math


class CalcStates(StatesGroup):
    CALCULATING = State()


async def start_calc(message: types.Message, state: FSMContext):
    await message.answer(
        "üìü –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞. –í–≤–µ–¥–∏—Ç–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ:",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await state.set_state(CalcStates.CALCULATING)


async def calculate(message: types.Message, state: FSMContext):
    text = message.text
    try:
        cleaned_text = re.sub(r'[^\d+\-*/().^%&| ]', '', text)
        safe_dict = {k: v for k, v in globals().items() if k in dir(__builtins__) or k in dir(math)}
        result = eval(cleaned_text, {"__builtins__": None}, safe_dict)
        await message.answer(
            f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ /cancel –¥–ª—è –≤—ã—Ö–æ–¥–∞."
        )
    except Exception as e:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞: {e}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ /cancel –¥–ª—è –≤—ã—Ö–æ–¥–∞."
        )


async def cancel(message: types.Message, state: FSMContext):
    from keyboard import calc_keyboard

    await message.answer(
        "üö™ –í—ã—Ö–æ–¥ –∏–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞.",
        reply_markup=types.ReplyKeyboardMarkup(
            keyboard=calc_keyboard,
            resize_keyboard=True
        )
    )
    await state.clear()


def setup_calculator(dp: Dispatcher):
    dp.message.register(start_calc, Command("calc"))
    dp.message.register(cancel, Command("cancel"), CalcStates.CALCULATING)
    dp.message.register(calculate, CalcStates.CALCULATING)
